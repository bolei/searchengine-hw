package myimpl;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;

import org.apache.lucene.analysis.Analyzer.TokenStreamComponents;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

public class MiscUtil {

	private static IndexReader indexReader;
	public static MyEnglishAnalyzerConfigurable analyzer = new MyEnglishAnalyzerConfigurable(
			Version.LUCENE_43);
	static {
		analyzer.setLowercase(true);
		analyzer.setStopwordRemoval(true);
		analyzer.setStemmer(MyEnglishAnalyzerConfigurable.StemmerType.KSTEM);
	}

	public static IndexReader createIndexReader(String indexPath)
			throws IOException {
		indexReader = DirectoryReader.open(FSDirectory
				.open(new File(indexPath)));
		return indexReader;
	}

	public static IndexReader getIndexReader() {
		if (indexReader == null) {
			System.err.println("index reader is null");
			System.exit(1);
		}
		return indexReader;
	}

	/**
	 * Given a query string, returns the terms one at a time with stopwords
	 * removed and the terms stemmed using the Krovetz stemmer.
	 * 
	 * Use this method to process raw query terms.
	 * 
	 * @param query
	 *            String containing query
	 * @return Array of query tokens
	 * @throws IOException
	 */
	public static String[] tokenizeQuery(String query) throws IOException {

		TokenStreamComponents comp = analyzer.createComponents("dummy",
				new StringReader(query));
		TokenStream tokenStream = comp.getTokenStream();

		CharTermAttribute charTermAttribute = tokenStream
				.addAttribute(CharTermAttribute.class);
		tokenStream.reset();

		List<String> tokens = new ArrayList<String>();
		while (tokenStream.incrementToken()) {
			String term = charTermAttribute.toString();
			tokens.add(term);
		}
		return tokens.toArray(new String[tokens.size()]);
	}

	/**
	 * Prints the query results.
	 * 
	 * THIS IS NOT THE CORRECT OUTPUT FORMAT. YOU MUST CHANGE THIS METHOD SO
	 * THAT IT OUTPUTS IN THE FORMAT SPECIFIED IN THE HOMEWORK PAGE, WHICH IS:
	 * 
	 * QueryID Q0 DocID Rank Score RunID
	 * 
	 * @param queryName
	 *            Original query.
	 * @param result
	 *            Result object generated by {@link Qryop#evaluate()}.
	 * @throws IOException
	 */
	public static void printResults(String queryId, MyQryResult result)
			throws IOException {

		if (!(result instanceof MyScoreList)) {
			System.out.println(queryId + ":\tNo results.");
			return;
		}
		MyScoreList sl = (MyScoreList) result;
		int rank = 0;
		for (Entry<Integer, Float> entry : sl.getScores().entrySet()) {
			System.out.println(String.format("%s\tQ0\t%d\t%d\t%f\trun-1",
					queryId, entry.getKey(), rank, entry.getValue()));
			rank++;
		}
	}

}
